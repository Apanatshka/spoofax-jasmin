module src-gen/check/JasminXT-Numbers-chk

imports
  libstratego-gpp
  runtime/tmpl/pp
  libstratego-sglr
  src-gen/signatures/JasminXT-Numbers-sig


strategies
  jasmin-check-SDF-start-symbols =
    jasmin-check-Int


strategies
  jasmin-check-Double =
    is-string

  jasmin-check-Float =
    is-string

  jasmin-check-Int =
    is-string

  jasmin-check-example =
    jasmin-check-Double

  jasmin-check-example =
    jasmin-check-Float

  jasmin-check-example =
    jasmin-check-Int

  jasmin-check-Double :
    amb([h|hs]) -> <check-Double> h

  jasmin-check-Float :
    amb([h|hs]) -> <check-Float> h

  jasmin-check-Int :
    amb([h|hs]) -> <check-Int> h

  error-Double =
    debug(!"Unexpected constructor. Expected string from sort Double instead. ")

  error-Float =
    debug(!"Unexpected constructor. Expected string from sort Float instead. ")

  error-Int =
    debug(!"Unexpected constructor. Expected string from sort Int instead. ")


strategies
  jasmin-check-NegInt =
    is-string

  jasmin-check-example =
    jasmin-check-NegInt

  jasmin-check-NegInt :
    amb([h|hs]) -> <check-NegInt> h

  error-NegInt =
    debug(!"Unexpected constructor. Expected string from sort NegInt instead. ")


strategies
  jasmin-check-example =
    jasmin-check-Constant

  jasmin-check-Constant :
    Double(t1__) -> <id>
    with <(check-Double <+ error-Double)> t1__

  is-Constant-with-constructor =
    ?Double(_)

  jasmin-check-Constant :
    Float(t1__) -> <id>
    with <(check-Float <+ error-Float)> t1__

  is-Constant-with-constructor =
    ?Float(_)

  jasmin-check-Constant :
    Int(t1__) -> <id>
    with <(check-Int <+ error-Int)> t1__

  is-Constant-with-constructor =
    ?Int(_)

  is-Constant-with-constructor =
    fail

  jasmin-check-Constant :
    amb([h|hs]) -> <check-Constant> h

  error-Constant =
    debug(!"Unexpected constructor. Expected constructor from sort Constant instead. ")