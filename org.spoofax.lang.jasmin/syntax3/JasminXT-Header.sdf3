module JasminXT-Header

imports
  lexical/JasminXT-Names
  lexical/JasminXT-Numbers
  lexical/JasminXT-Strings
  lexical/JasminXT-Descriptors

context-free start-symbols
  JasminHeader

templates // header
  JasminHeader.JBCHeader = [[BytecodeSpec]
[SourceSpec]
[ClassSpec]
[SuperSpec]
[ImplementsSpec*; separator = "\n"]
[SignatureSpec]
[EnclosingSpec]
[DebugSpec*; separator="\n"]
[InnerClassSpec*; separator="\n"]
[InnerInterfaceSpec*; separator="\n"]]

templates
  BytecodeSpec.JBCVersion = [.bytecode [MajorVersion] [MinorVersion]]
  BytecodeSpec.None       = []

  MajorVersion.Major = [[Int]]
  MinorVersion.Minor = [.[Int]]
  MinorVersion.None  = []

  SourceSpec.JBCSource = [.source [String]]
  SourceSpec.None      = []

templates
  ClassSpec.JBCClass     = [.class [ClassAccess*; separator = " "] [ClassName]]
  ClassSpec.JBCInterface = [.interface [ClassAccess*; separator = " "] [ClassName]]

  ClassAccess.PUBLIC    = [public]
  ClassAccess.FINAL     = [final]
  ClassAccess.INTERFACE = [interface]
  ClassAccess.ABSTRACT  = [abstract]
  ClassAccess.SUPER     = [super]

  SuperSpec.JBCSuper = [.super [ClassName]]

  ImplementsSpec.JBCImplements = [.implements [ClassName]]

templates
  SignatureSpec.JBCSignature = [.signature [String]]
  SignatureSpec.None         = []

  EnclosingSpec.JBCEnclosing = [.enclosing method [MethodDescriptor]]
  EnclosingSpec.None         = []
  
  DebugSpec.JBCDebug = [.debug [String]]
  
  // TODO .inner {class,interface}
  // perhaps <access> is not equals to <access_spec> but instead about the access flags from the 2.1 changelog 
  // InnerClassSpec.JBCInnerClass = [.inner class [ClassAccess*; separator=" "] [ClassName]]
  
  // InnerInterfaceSpec.JBCInnerInterface = [.inner interface [ClassAccess*; separator=" "] [ClassName]]

lexical restrictions
  ".bytecode"
  ".source"
  ".class"     
  ".interface" 
  "public" 
  "final" 
  "interface"
  "abstract" 
  "super" 	
  ".super" 		
  ".implements" 		
  ".signature" 
  ".enclosing" 
  "method" // why was this commented before?
  ".deprecated"		-/- ~[\ \t]