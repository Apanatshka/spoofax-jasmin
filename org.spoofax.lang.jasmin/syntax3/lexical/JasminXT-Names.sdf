module lexical/JasminXT-Names
imports lexical/JasminXT-Numbers lexical/JasminXT-Descriptors

exports
  context-free start-symbols
    Identifier SQIdentifier QualifiedName LabelName MethodName ClassRef VarRef
    LabelRef FRef MRef BaseTypeName

  lexical syntax
    [A-Za-z] [A-Za-z0-9\_]*                         -> Identifier    
    Identifier                                      -> SQIdentifier  
    "'" Identifier "'"                              -> SQIdentifier  
    {Identifier "/"}+                               -> QualifiedName 
    ~[\=\:\.\"\-\ \t\n\r0-9] ~[\=\:\.\"\-\ \t\n\r]* -> LabelName     

  lexical restrictions
    Identifier -/- [a-zA-Z0-9\_]
    LabelName -/- ~[\=\:\.\"\-\ \t\n\r]

  context-free syntax
    QualifiedName -> ClassName  
    Identifier    -> FieldName  
    Identifier    -> MethodName 
    "<init>"      -> MethodName {cons("Init")}
    SQIdentifier  -> VarName    

  context-free syntax
    CONTENTCOMPLETE -> ClassName  {cons("COMPLETION-ClassName")}
    CONTENTCOMPLETE -> FieldName  {cons("COMPLETION-FieldName")}
    CONTENTCOMPLETE -> MethodName {cons("COMPLETION-MethodName")}
    CONTENTCOMPLETE -> VarName    {cons("COMPLETION-VarName")}

  context-free syntax
    ClassName  -> ClassRef {cons("CRef")}
    Int        -> VarRef   {cons("VarNum")}
    VarName    -> VarRef   {cons("VarRef")}
    LabelName  -> LabelRef {cons("LabelRef")}
    FieldName  -> FRef     {cons("FRef")}
    MethodName -> MRef     {cons("MRef")}

  context-free syntax
    CONTENTCOMPLETE -> ClassRef {cons("COMPLETION-ClassRef")}
    CONTENTCOMPLETE -> VarRef   {cons("COMPLETION-VarRef")}
    CONTENTCOMPLETE -> LabelRef {cons("COMPLETION-LabelRef")}
    CONTENTCOMPLETE -> FRef     {cons("COMPLETION-FRef")}
    CONTENTCOMPLETE -> MRef     {cons("COMPLETION-MRef")}

  syntax
    <ClassRef-CF> "/" <FRef-CF> <LAYOUT?-CF> <FieldDescriptor-CF> -> <FieldRef-CF>  {"JBCFieldRef"}
    <ClassRef-CF> "/" <MRef-CF> <MethodDescriptor-CF>             -> <MethodRef-CF> {"JBCMethodRef"}

  context-free syntax
    "byte"    -> BaseTypeName {cons("ByteName")}
    "char"    -> BaseTypeName {cons("CharName")}
    "double"  -> BaseTypeName {cons("DoubleName")}
    "float"   -> BaseTypeName {cons("FloatName")}
    "int"     -> BaseTypeName {cons("IntName")}
    "long"    -> BaseTypeName {cons("LongName")}
    "short"   -> BaseTypeName {cons("ShortName")}
    "boolean" -> BaseTypeName {cons("BooleanName")}

  context-free syntax
    CONTENTCOMPLETE -> BaseTypeName {cons("COMPLETION-BaseTypeName")}