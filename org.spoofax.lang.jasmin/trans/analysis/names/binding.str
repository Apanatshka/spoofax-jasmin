module binding

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  include/JasminXT


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Label    : Namespace
    Variable : Namespace


rules

  nam-get-scope-types :
    JBCMethod(_, _, _, _) -> [Label(), Variable()]


rules

  nam-get-definition-keys :
    JBCLabel(l) -> [l]

  nam-get-definitions :
    JBCLabel(l) -> [(Label(), [l])]

  nam-annotate-names(|paths__, path__):
    JBCLabel(l) -> <JBCLabel(nam-annotate-def(|path__))>

  nam-unique :
    JBCLabel(l) -> <id>


rules

  nam-get-uses-keys :
    LabelRef(l) -> [l]

  nam-get-uses :
    LabelRef(l) -> [(Label(), [l])]

  nam-annotate-names(|paths__, path__):
    LabelRef(l) -> <LabelRef(nam-annotate-use(|paths__, Label()))>


rules

  nam-get-definition-keys :
    JBCVarDecl(n, _, _, _, _) -> [n]

  nam-get-definitions :
    JBCVarDecl(n, _, _, _, _) -> [(Variable(), [n])]

  nam-annotate-names(|paths__, path__):
    JBCVarDecl(n, _, _, _, _) -> <JBCVarDecl(nam-annotate-def(|path__), id, id, id, id)>

  nam-unique :
    JBCVarDecl(n, _, _, _, _) -> <id>


rules

  nam-get-uses-keys :
    VarNum(n) -> [n]

  nam-get-uses :
    VarNum(n) -> [(Variable(), [n])]

  nam-annotate-names(|paths__, path__):
    VarNum(n) -> <VarNum(nam-annotate-use(|paths__, Variable()))>